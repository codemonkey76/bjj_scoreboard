use std::collections::BTreeMap;
use eframe::egui;
use eframe::egui::TextureOptions;
use eframe::epaint::TextureHandle;
use egui_extras::image::FitTo;
use strum::IntoEnumIterator;
use strum_macros::EnumIter;

#[derive(Debug, Copy, Clone, PartialEq, Eq, PartialOrd, Ord, EnumIter)]
pub enum Country {
    Andorra,
    UnitedArabEmirates,
    Afghanistan,
    Antigua,
    Anguilla,
    Albania,
    Armenia,
    // Angola,
    // Antarctica,
    // Argentina,
    // AmericanSamoa,
    // Austria,
    Australia,
    // Aruba,
    // AlandIslands,
    // Azerbaijan,
    // BosniaHerzegovina,
    // Barbados,
    // Bangladesh,
    // Belgium,
    // BurkinaFaso,
    // Bulgaria,
    // Bahrain,
    // Burundi,
    // Benin,
    // SaintBarthelemy,
    // Bermuda,
    // BruneiDarussalam,
    // Bolivia,
    // Bonaire,
    Brazil,
    // Bahamas,
    // Bhutan,
    // BouvetIsland,
    // Botswana,
    // Belarus,
    // Belize,
    // Canada,
    // CocosIslands,
    // CongoDemocraticRepublic,
    // CentralAfricanRepublic,
    // Congo,
    // Switzerland,
    // CotedIvoire,
    // CookIslands,
    // Chile,
    // Cameroon,
    // China,
    // Colombia,
    // CostaRica,
    // Cuba,
    // CaboVerde,
    // Curaçao,
    // ChristmasIsland,
    // Cyprus,
    // Czechia,
    // Germany,
    // Djibouti,
    // Denmark,
    // Dominica,
    // DominicanRepublic,
    // Algeria,
    // Ecuador,
    // Estonia,
    // Egypt,
    // WesternSahara,
    // Eritrea,
    // Spain,
    // Ethiopia,
    // Finland,
    // Fiji,
    // FalklandIslands,
    // Micronesia,
    // FaroeIslands,
    // France,
    // Gabon,
    // UnitedKingdom,
    // Grenada,
    // Georgia,
    // FrenchGuiana,
    // Guernsey,
    // Ghana,
    // Gibraltar,
    // Greenland,
    // Gambia,
    // Guinea,
    // Guadeloupe,
    // EquatorialGuinea,
    // Greece,
    // SouthGeorgia,
    // Guatemala,
    // Guam,
    // GuineaBissau,
    // Guyana,
    // HongKong,
    // HeardIsland,
    // Honduras,
    // Croatia,
    // Haiti,
    // Hungary,
    // Indonesia,
    // Ireland,
    // Israel,
    // IsleOfMan,
    // India,
    // BritishIndianOceanTerritory,
    // Iraq,
    // Iran,
    // Iceland,
    // Italy,
    // Jersey,
    // Jamaica,
    // Jordan,
    // Japan,
    // Kenya,
    // Kyrgyzstan,
    // Cambodia,
    // Kiribati,
    // Comoros,
    // SaintKittsNevis,
    // KoreaDemocraticPeoplesRepublic,
    // KoreaRepublic,
    // Kuwait,
    // CaymanIslands,
    // Kazakhstan,
    // Lao,
    // Lebanon,
    // SaintLucia,
    // Liechtenstein,
    // SriLanka,
    // Liberia,
    // Lesotho,
    // Lithuania,
    // Luxembourg,
    // Latvia,
    // Libya,
    // Morocco,
    // Monaco,
    // Moldova,
    // Montenegro,
    // SaintMartin,
    // Madagascar,
    // MarshallIslands,
    // NorthMacedonia,
    // Mali,
    // Myanmar,
    // Mongolia,
    // Macao,
    // NorthernMarianaIslands,
    // Martinique,
    // Mauritania,
    // Montserrat,
    // Malta,
    // Mauritius,
    // Maldives,
    // Malawi,
    // Mexico,
    // Malaysia,
    // Mozambique,
    // Namibia,
    // NewCaledonia,
    // Niger,
    // NorfolkIsland,
    // Nigeria,
    // Nicaragua,
    // Netherlands,
    // Norway,
    // Nepal,
    // Nauru,
    // Niue,
    // NewZealand,
    // Oman,
    // Panama,
    // Peru,
    // FrenchPolynesia,
    // PapuaNewGuinea,
    // Philippines,
    // Pakistan,
    // Poland,
    // SaintPierreandMiquelon,
    // Pitcairn,
    // PuertoRico,
    // Palestine,
    // Portugal,
    // Palau,
    // Paraguay,
    // Qatar,
    // Réunion,
    // Romania,
    // Serbia,
    // RussianFederation,
    // Rwanda,
    // SaudiArabia,
    // SolomonIslands,
    // Seychelles,
    // Sudan,
    // Sweden,
    // Singapore,
    // SaintHelena,
    // Slovenia,
    // SvalbardandJanMayen,
    // Slovakia,
    // SierraLeone,
    // SanMarino,
    // Senegal,
    // Somalia,
    // Suriname,
    // SouthSudan,
    // SaoTomeandPrincipe,
    // ElSalvador,
    // SintMaarten,
    // SyrianArabRepublic,
    // Eswatini,
    // TurksandCaicosIslands,
    // Chad,
    // FrenchSouthernTerritories,
    // Togo,
    // Thailand,
    // Tajikistan,
    // Tokelau,
    // TimorLeste,
    // Turkmenistan,
    // Tunisia,
    // Tonga,
    // Turkiye,
    // TrinidadTobago,
    // Tuvalu,
    // Taiwan,
    // Tanzania,
    // Ukraine,
    // Uganda,
    // UnitedStatesMinorOutlyingIslands,
    UnitedStates,
    // Uruguay,
    // Uzbekistan,
    // HolySee,
    // SaintVincentGrenadines,
    // Venezuela,
    // VirginIslandsBritish,
    // VirginIslands,
    // VietNam,
    // Vanuatu,
    // WallisandFutuna,
    // Samoa,
    // Yemen,
    // Mayotte,
    // SouthAfrica,
    // Zambia,
    // Zimbabwe,
}

impl Country {
    fn flag(&self) -> Flag {
        match self {
            Country::Andorra => Flag {
                code: "AD".to_owned(),
                name: "Andorra".to_owned(),
                country: Country::Andorra,
                bytes: include_bytes!("../../assets/flags/as.svg"),
                handle: None
            },
            Country::UnitedArabEmirates => Flag {
                code: "AE".to_owned(),
                name: "United Arab Emirates".to_owned(),
                country: Country::UnitedArabEmirates,
                bytes: include_bytes!("../../assets/flags/ae.svg"),
                handle: None
            },
            Country::Afghanistan => Flag {
                code: "AF".to_owned(),
                name: "Afghanistan".to_owned(),
                country: Country::Afghanistan,
                bytes: include_bytes!("../../assets/flags/af.svg"),
                handle: None
            },
            Country::Antigua => Flag {
                code: "AG".to_owned(),
                name: "Antigua and Barbuda".to_owned(),
                country: Country::Antigua,
                bytes: include_bytes!("../../assets/flags/ag.svg"),
                handle: None
            },
            Country::Anguilla => Flag {
                code: "AI".to_owned(),
                name: "Anguilla".to_owned(),
                country: Country::Anguilla,
                bytes: include_bytes!("../../assets/flags/ai.svg"),
                handle: None
            },
            Country::Albania => Flag {
                code: "AL".to_owned(),
                name: "Albania".to_owned(),
                country: Country::Albania,
                bytes: include_bytes!("../../assets/flags/al.svg"),
                handle: None
            },
            Country::Armenia => Flag {
                code: "AM".to_owned(),
                name: "Armenia".to_owned(),
                country: Country::Armenia,
                bytes: include_bytes!("../../assets/flags/am.svg"),
                handle: None
            },
            Country::Australia => Flag {
                code: "AU".to_owned(),
                name: "Australia".to_owned(),
                country: Country::Australia,
                bytes: include_bytes!("../../assets/flags/au.svg"),
                handle: None
            },
            Country::Brazil => Flag {
                code: "BR".to_owned(),
                name: "Brazil".to_owned(),
                country: Country::Brazil,
                bytes: include_bytes!("../../assets/flags/br.svg"),
                handle: None
            },
            Country::UnitedStates => Flag {
                code: "US".to_owned(),
                name: "United States".to_owned(),
                country: Country::UnitedStates,
                bytes: include_bytes!("../../assets/flags/us.svg"),
                handle: None
            }
        }
    }
}

pub struct Flag {
    pub code: String,
    pub name: String,
    pub country: Country,
    bytes: &'static [u8],
    pub handle: Option<TextureHandle>
}

impl Flag {
    pub fn load_textures(ctx: &egui::Context) -> BTreeMap<Country, Flag>{
        let mut map = BTreeMap::new();
        for country in Country::iter() {
            let mut flag = country.flag();

            let image = egui_extras::image::load_svg_bytes_with_size(
                flag.bytes,
                FitTo::Height(360)
            );

            match image {
                Ok(color_image) => {
                    let texture = ctx.load_texture(
                        flag.code.as_str(),
                        color_image,
                        TextureOptions::default()
                    );
                    flag.handle = Some(texture);
                    map.insert(country, flag);
                }
                Err(e) => {
                    println!("Error loading SVG: {}", e);
                }
            }

        }
        map
    }
}
